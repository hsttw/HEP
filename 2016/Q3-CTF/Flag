#! /usr/bin/env python

import logging
logger = logging.getLogger('HST.CTF')
logfmt = logging.Formatter('[%(asctime)-15s]  %(message)s')
logFP  = logging.StreamHandler()
logFP.setFormatter(logfmt)
logger.addHandler(logFP)
logger.setLevel(logging.INFO)

from flask import Flask, request, make_response
app = Flask(__name__)

TEST_FLAG = 'HST_2016{CTF Flag f0rm@t}'
FMT       = r'HST_2016{[^}]+}'
homedir   = '~/.gnupg'

if True:	## DB related
	import sqlalchemy
	from sqlalchemy import Column, Integer, String, DateTime, Text, Index, ForeignKey
	from sqlalchemy.ext.declarative import declarative_base
	from sqlalchemy.orm import relationship, backref
	Base = declarative_base()

	from sqlalchemy.engine import Engine
	from sqlalchemy import event

	''' Enable the SQLite Foreign Key '''
	@event.listens_for(Engine, "connect")
	def set_sqlite_pragma(dbapi_connection, connection_record):
		cursor = dbapi_connection.cursor()
		cursor.execute("PRAGMA foreign_keys=ON")
		cursor.close()

	class UsrDB(Base):
		__tablename__ = 'hst_2016_ctf_usr'

		ip        = Column(String(16))
		usr       = Column(String(16), primary_key=True)
		quiz      = Column(Text(convert_unicode=True))
		pwd       = Column(String(64))
		agent     = Column(Text(convert_unicode=True))
		session   = Column(String(32))
		timestamp = Column(DateTime)

		flag   = relationship('FlagDB')
		submit = relationship('SubmitDB')

		def __init__(cls, usr, pwd, ip, agent):
			from datetime import datetime

			cls.ip        = ip
			cls.usr       = usr
			cls.pwd       = pwd
			cls.score     = 0
			cls.agent     = agent
			cls.timestamp = datetime.now()
		def __repr__(cls):
			return u'{0.usr} on {0.ip:16s} / {0.agent}'.format(cls)
	class FlagDB(Base):
		__tablename__ = 'hst_2016_ctf_flag'

		ip        = Column(String(16))
		usr       = Column(String(16), ForeignKey('hst_2016_ctf_usr.usr'))
		score     = Column(Integer)
		flag      = Column(Text, primary_key=True)
		title     = Column(Text(convert_unicode=True))
		contain   = Column(Text(convert_unicode=True))
		timestamp = Column(DateTime)

		def __init__(cls, ip, usr, flag, title, contain, score=1):
			from datetime import datetime
			import gnupg

			gpg   = gnupg.GPG(homedir=homedir)

			cls.ip        = ip
			cls.usr       = usr
			cls.score     = score
			cls.flag      = str(gpg.encrypt(flag, '5643EAA1'))
			cls.title     = title
			cls.contain   = contain
			cls.timestamp = datetime.now()
		def __repr__(cls):
			return u'{0.usr:16s} add CTF - {0.title}'.format(cls)
	class SubmitDB(Base):
		__tablename__ = 'hst_2016_ctf_submit'

		id        = Column(Integer, primary_key=True)
		ip        = Column(String(16))
		usr       = Column(String(16), ForeignKey('hst_2016_ctf_usr.usr'))
		flag      = Column(Text)
		timestamp = Column(DateTime)

		def __init__(cls, ip, usr, flag):
			from datetime import datetime

			cls.ip    = ip
			cls.usr   = usr
			cls.flag  = flag
			timestamp = datetime.now()
		def __repr__(cls):
			return u'{0.usr} submit {0.flag}'.format(cls)

	class FlagDBAgent(object):
		def __init__(cls, engine='sqlite:///flag.db'):
			from sqlalchemy import create_engine, MetaData
			from sqlalchemy.orm import sessionmaker

			engine   = create_engine(engine, encoding='UTF-8', convert_unicode=False)

			Base.metadata.create_all(engine)

			Session = sessionmaker(bind=engine)
			session = Session()

			metadata = MetaData(bind=engine)
			metadata.create_all(engine)

			cls.session = session
			for attr in ('query', 'add', 'commit', 'rollback'):
				setattr(cls, attr, getattr(cls.session, attr))
		def usr(cls, session):
			record = cls.query(UsrDB).filter(UsrDB.session == session).all()
			if 1 != len(record):
				return ''
			return record[0].usr

	if not FlagDBAgent().query(UsrDB).count():
		param = {
			'ip'		: '127.0.0.1',
			'usr'		: 'CTF admin',
			'pwd'		: '',
			'agent'		: 'localhost',
		}
		record = UsrDB(**param)
		db = FlagDBAgent()
		db.add(record)
		db.commit()
	if not FlagDBAgent().query(FlagDB).count():
		README  = r'Welcome join the HST 2016 Q3 event, this is a CTF quiz and you can find many quizzes '
		README += r'in many way on this site, and finally you should find out the flag and the flag '
		README += r'has special format likes `{0}`. When you find the flag, you can use '.format(TEST_FLAG)
		README += r'command `flag` to submit the flag'
		param = {
			'ip'		: '127.0.0.1',
			'usr'		: 'CTF admin',
			'flag'		: TEST_FLAG,
			'title'		: 'README',
			'contain'	: README
		}
		record = FlagDB(**param)
		db = FlagDBAgent()
		db.add(record)
		db.commit()

@app.route('/')
def flagMainPage():
	from flask import render_template

	session = request.cookies['session'] if 'session' in request.cookies else ''
	usr =  FlagDBAgent().usr(session)
	db = FlagDBAgent()

	defaultWelcome = 'Welcome HST 2016 Q3 event, you need login or regist first!\\n\\n'
	loginWelcome   = 'Try to find out the flag, {0}\\n\\n'.format(usr)
	helpmsg        = r'You need to find any quiz in this system and find the flag in the quiz,' +					\
					 r'which the flag is the format like HST_2016{...}, and then using the command `flag`.\n\n' +	\
					 r'For example, `flag {0}`'.format(TEST_FLAG)

	param = {
		'help'      : helpmsg,
		'welcome'	: (loginWelcome if usr else defaultWelcome),
		'usr'		: (usr if usr else '...'),
		'ctf_cnt'	: db.query(FlagDB).count(),
	}
	return render_template('layout.htm', param=param)

if True:	## account related
	@app.route('/register/<usr>/<pwd>')
	def flagRegister(usr, pwd):
		''' Handle the register event '''
		ip    = request.remote_addr
		agent = request.headers.get('User-Agent')

		db  = FlagDBAgent()
		if db.query(UsrDB).filter(UsrDB.usr == usr).count():
			return 'Already regist', 400

		''' FIXME - Should we use plaintext? Yes! '''
		record = UsrDB(usr, pwd, ip, agent)
		db.add(record)
		db.commit()
		return 'Welcome join our quiz, {0}\n'.format(usr)
	@app.route('/login/<usr>/<pwd>')
	def flagLogin(usr, pwd):
		''' Handle the login event '''
		ip    = request.remote_addr
		agent = request.headers.get('User-Agent')

		query  = FlagDBAgent().query(UsrDB)
		if not query.filter(UsrDB.usr == usr).count():
			return 'You need to register first\n', 404
		elif 1 != query.filter(UsrDB.usr == usr).filter(UsrDB.pwd == pwd).count():
			return 'Login failure\n', 403

		import random
		from datetime import datetime

		''' FIXME - Should we using Simple Pseudo Random Number? Yes! '''
		random.seed(datetime.now())
		session = '{0}-{1:X}'.format(usr, random.randint(0, 2**32))

		db = FlagDBAgent()
		db.query(UsrDB).filter(UsrDB.usr == usr).update({'session' : session})
		db.commit()

		resp = make_response('Welcome back {0} ~\n'.format(usr))
		resp.set_cookie('session', session)
		return resp
	@app.route('/logout/<usr>')
	def flagLogout(usr):
		ip      = request.remote_addr
		agent   = request.user_agent
		session = request.cookies['session'] if 'session' in request.cookies else ''

		query  = FlagDBAgent().query(UsrDB)
		if not query.filter(UsrDB.usr == usr).count():
			return 'You need to register first\n', 404
		elif 1 != query.filter(UsrDB.usr == usr).filter(UsrDB.session == session).count():
			return 'Logout failure\n', 403

		db = FlagDBAgent()
		db.query(UsrDB).filter(UsrDB.usr == usr).update({'session' : ''})
		db.commit()
		return 'Good-bye {0} ~\n'.format(usr)

@app.route('/quiz/<cmd>')
def flagQuiz(cmd):
	import json

	session = request.cookies['session'] if 'session' in request.cookies else ''
	usr     = FlagDBAgent().usr(session)
	if not usr:
		return 'You need login first', 403

	param = request.args.get('param') if 'param' in request.args else ''
	if 'ls' == cmd:
		if not param:
			query  = FlagDBAgent().query(UsrDB, FlagDB).join(FlagDB)
			query  = query.group_by(FlagDB.title)
			record = r'    '.join([_.FlagDB.title for _ in query.all() if not _.FlagDB.title.startswith('.')])
			return json.dumps(record)
		elif param in ('-h', '--help'):
			return json.dumps('ls [-lh]')
		elif param in ('-l', '-al', '-la'):
			fmt    = 'drwxr--r-- {0:>16s} users {1.score:>5d} {2} {1.title}'

			query  = FlagDBAgent().query(UsrDB, FlagDB).join(FlagDB)
			query  = query.group_by(FlagDB.title)

			record = [[_.UsrDB.usr, _.FlagDB] for _ in query.all()]
			last   = sorted([_.timestamp for x, _ in record])[0]
			record = [fmt.format(usr, db, db.timestamp.strftime('%Y %H:%m:%d')) for usr, db in record]

			fmt2   = 'drwxr--r-- {0:>16s} users {2} {1} {{0}}'.format('CTF admin', last.strftime('%Y %H:%m:%d'), '?'*5)
			resp   = '\n'.join([fmt2.format(_) for _ in ('.', '..')] + record)
			return json.dumps(resp)
	elif 'cat' == cmd:
		if not param or param in ('-h', '--help'):
			return json.dumps('cat [-h] file')

		record = FlagDBAgent().query(FlagDB).filter(FlagDB.title == param).all()
		if 1 != len(record):
			return json.dumps('file {0} not exist'.format(param))
		else:
			return json.dumps(u'Quiz: {0}\n\n{1}\n'.format(param, record[0].contain))
	elif 'flag' == cmd:
		resp = flagSubmit(usr, param)
		return json.dumps(resp) if isinstance(resp, str) else resp
	elif 'score' == cmd:
		db   = FlagDBAgent()
		quiz = db.query(UsrDB).filter(UsrDB.usr == usr).first().quiz
		quiz = json.loads(quiz) if quiz else []
		quiz = [[_, db.query(FlagDB).filter(FlagDB.title == _).first().score] for _ in quiz]

		resp  = 'Your score is {0}\n\n'.format(sum([y for x, y in quiz]))
		resp += u'\n'.join(['{0:4d} {1}'.format(y, x) for x, y in quiz])

		return json.dumps(resp)
	else:
		return 'command {0} not found'.format(cmd), 404
def flagSubmit(usr, flag):
	''' Flag submit handler '''
	import re, gnupg

	''' First - Check the flag is legal format '''
	ip      = request.remote_addr
	session = request.cookies['session'] if 'session' in request.cookies else ''
	record  = SubmitDB(ip, usr, flag)
	db      = FlagDBAgent()
	gpg     = gnupg.GPG(homedir=homedir)

	logger.info('{0}'.format(str(record)))

	if not re.match(FMT, flag):
		return 'Flag format not match, it should be {0}\n'.format(FMT)
	elif db.query(FlagDB, SubmitDB).filter(SubmitDB.flag == flag).count():
		return 'Already submit this flag\n'

	''' Record the submit flag event '''
	db.add(record)
	db.commit()

	for answer in db.query(FlagDB).all():
		''' Second - Check the flag in the pool or not '''
		if flag == str(gpg.decrypt(answer.flag)):
			import json

			query  = db.query(UsrDB).filter(UsrDB.usr == usr).first()
			quiz   = query.quiz
			quiz   = json.loads(quiz) if quiz else []
			quiz   = quiz + [answer.title]
			score  = [_.score for _ in db.query(FlagDB) if _.title in quiz]

			db.query(UsrDB).filter(UsrDB.usr == usr).update({'quiz' : json.dumps(quiz)})
			db.commit()
			return 'Congratulation! Your score is {0}\n'.format(score)
	else:
		return 'Flag not match\n'
@app.route('/publish', methods=['GET', 'POST'])
def flagsPublish():
	return '', 403

if __name__ == '__main__':
	app.run(host='0.0.0.0', debug=True)
